// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(cuid())
    email    String
    password String
    name     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    posts        Post[]
    comments     PostComment[]
    likes        PostLike[]
    dislike      PostDislike[]
    userInFriend Friend[]  @relation("User") //nameing this wierdly as i had no idea what to name it
    friend       Friend[]  @relation("Friend")
    sharedPost   PostShare[] 




}

//model for friends
model Friend {
    
    //make relation with User
    author    User     @relation("User", fields: [userId], references: [id])
    userId  String
    //make relation with User
    friend    User     @relation("Friend", fields: [friendId], references: [id])
    friendId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, friendId]) 
}

//model for posts
model Post {
    id       String @id @default(cuid())
    title    String
    content  String
    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    comments PostComment[]
    likes    PostLike[]
    dislike  PostDislike[]
    share  PostShare[]

}

model PostComment {
    
    content  String
    post     Post   @relation(fields: [postId], references: [id])
    postId   String
    //relation with user
    author   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([postId, userId])

}

model PostLike {
    
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    //relation with user
    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([postId, userId])

}

model PostDislike {
    
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    //relation with user
    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([postId, userId])
}

model PostShare {
    
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    //relation with user
    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([postId, userId])
}
//model for chatting app
